{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOhbJ4/m4F3k2FbiiI1/vSy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"6_WE5ygNNGHR"},"outputs":[],"source":["#Import Base Model Pretrained\n","base_model = EfficientNetV2B0(\n","    include_top=False,\n","    weights=\"imagenet\",\n","    input_shape=IMG_SHAPE,\n",")"]},{"cell_type":"code","source":["#Ensemble Model using Average Method\n","\n","from tensorflow.keras.models import Model, load_model\n","from tensorflow.keras.layers import Input, Average\n","model_1 = load_model('path/model.h5')\n","model_1 = Model(inputs=model_1.inputs,\n","                outputs=model_1.outputs,\n","                name='EfficientNetV2B0')\n","model_2 = load_model('path/model.h5')\n","model_2 = Model(inputs=model_2.inputs,\n","                outputs=model_2.outputs,\n","                name='MobileNetV3Large')\n","models = [model_1, model_2]\n","model_input = Input(shape=(224, 224, 3))\n","model_outputs = [model(model_input) for model in models]\n","ensemble_output = Average()(model_outputs)\n","average_ensemble_model = Model(inputs=model_input, outputs=ensemble_output, name='ensemble')\n","\n","average_ensemble_model.compile(optimizer=Adam(learning_rate=0.0001),\n","             loss='categorical_crossentropy',\n","             metrics=[\"accuracy\"])\n","\n","early_stop = EarlyStopping(monitor='val_loss', mode='min', patience=3)\n","history = average_ensemble_model.fit(\n","    train_ds,\n","    validation_data=val_ds,\n","    epochs=10,\n","    callbacks=[early_stop]\n",")"],"metadata":{"id":"7at6FHdmcKep"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Ensemble Model Using Concatenation Method\n","\n","model_MobileNetV3Large = MobileNetV3Large(\n","    include_top=False,\n","    alpha=1.0,\n","    weights=\"imagenet\",\n","    input_shape=IMG_SHAPE,\n",")\n","\n","model_EfficientNetV2B0 = EfficientNetV2B0(\n","    include_top=False,\n","    weights=\"imagenet\",\n","    input_shape=IMG_SHAPE,\n",")\n","\n","for layer in model_MobileNetV3Large.layers:\n","        layer.trainable = False\n","\n","\n","for layer in model_EfficientNetV2B0.layers:\n","        layer.trainable = False\n","\n","models = [model_MobileNetV3Large, model_EfficientNetV2B0]\n","\n","inp = Input((224,224,3))\n","\n","mobileNetV3Large_process = Lambda(process_mobileNetV3Large)(inp)\n","MobileNetV3Large = model_MobileNetV3Large(mobileNetV3Large_process)\n","\n","efficientNetV2B0_process = Lambda(process_efficientNetV2B0)(inp)\n","EfficientNetV2B0 = model_EfficientNetV2B0(efficientNetV2B0_process)\n","\n","x = Concatenate()([MobileNetV3Large, EfficientNetV2B0])\n","x = Flatten(name=\"flatten\")(x)\n","x = Dense(1024, activation='relu')(x)\n","x = Dropout(0.2)(x)\n","out = Dense(10, activation='softmax')(x)\n","\n","concatenation_ensemble_model = Model(inp, out)\n","concatenation_ensemble_model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),\n","                  loss='categorical_crossentropy',\n","                  metrics=['accuracy'])\n","\n","class_names = train_ds.class_names\n","early_stop = tf.keras.callbacks.EarlyStopping(monitor='val_loss', mode='min', patience=3)\n","\n","history = concatenation_ensemble_model.fit(\n","    train_ds,\n","    validation_data=val_ds,\n","    epochs=10,\n","    callbacks=[early_stop]\n",")"],"metadata":{"id":"tcWgxFU9ceMd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"wcjR8zlHcrQ3"},"execution_count":null,"outputs":[]}]}